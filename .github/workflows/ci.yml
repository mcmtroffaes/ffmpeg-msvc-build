name: test

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        triplet: [x64-linux, x64-osx, x64-windows, x64-windows-static, x64-windows-static-md, x86-windows]
        features_id: [minimal, release, avcodec, avformat, avdevice, avfilter, swresample, swscale]
        exclude:
          - triplet: x86-windows
          - triplet: x64-windows
          - triplet: x64-windows-static
        include:
          # extra release builds
          - triplet: x64-windows
            features_id: release
          - triplet: x64-windows-static
            features_id: release
          # extra builds that tend to break
          - triplet: x86-windows
            features_id: avcodec
          - triplet: x64-windows
            features_id: avcodec
          - triplet: x64-windows
            features_id: avfilter
          # os per triplet
          - triplet: x64-linux
            os: ubuntu-latest
          - triplet: x64-osx
            os: macos-latest
          - triplet: x64-windows
            os: windows-latest
            arch: amd64
          - triplet: x64-windows-static
            os: windows-latest
            arch: amd64
          - triplet: x64-windows-static-md
            os: windows-latest
            arch: amd64
          - triplet: x86-windows
            os: windows-latest
            arch: amd64_x86
          # features per feature_id
          - features_id: minimal
            features: "[core]"
          - features_id: avcodec
            features: "[core,avcodec]"
          - features_id: avformat
            features: "[core,avformat]"
          - features_id: avdevice
            features: "[core,avdevice]"
          - features_id: avfilter
            features: "[core,avfilter]"
          - features_id: swresample
            features: "[core,swresample]"
          - features_id: swscale
            features: "[core,swscale]"
          - features_id: release
            features: "[core,avcodec,avformat,avdevice,avfilter,swresample,swscale,opus,vpx]"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install cmake ninja-build nasm gperf libgl-dev libxext-dev

      - name: Install macos dependencies
        if: matrix.os == 'macos-latest'
        run: brew install cmake ninja nasm

      - uses: actions/cache@v2
        id: vcpkg-executable-cache
        with:
          path: ./vcpkg/vcpkg*
          key: vcpkg-${{ runner.os }}

      - name: Bootstrap vcpkg (non-windows)
        if: matrix.os != 'windows-latest' && steps.vcpkg-executable-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/bootstrap-vcpkg.sh -disableMetrics -useSystemBinaries

      - name: Bootstrap vcpkg (windows)
        if: matrix.os == 'windows-latest' && steps.vcpkg-executable-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/bootstrap-vcpkg.bat

      - uses: actions/cache@v2
        id: vcpkg-installed-cache
        with:
          path: ./vcpkg/installed
          key: vcpkg-${{ hashFiles('VCPKG_HASH.txt') }}-${{ matrix.triplet }}-${{ matrix.features_id }}

      - name: Install pkgconf (windows)
        if: matrix.os == 'windows-latest' && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/vcpkg install pkgconf:${{ matrix.triplet }} --recurse

      - name: Install ffmpeg
        if: steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/vcpkg install ffmpeg${{ matrix.features }}:${{ matrix.triplet }} --recurse

      - name: Upload logs
        if: failure() && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-${{ matrix.triplet }}-${{ matrix.features_id }}
          path: vcpkg/buildtrees/**/*.log

      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'
        with:
          arch: ${{ matrix.arch }}

      - name: Test (non-windows)
        if: matrix.os != 'windows-latest'
        run: ./test.sh ${{ github.workspace }}/vcpkg ${{ matrix.triplet }}
 
      - name: Test (windows)
        if: matrix.os == 'windows-latest'
        run: ./test.bat ${{ github.workspace }}\vcpkg ${{ matrix.triplet }}
  
