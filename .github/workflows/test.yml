name: test

on:
  workflow_dispatch:
    inputs:
      triplets:
        description: 'triplets to use'
        required: false
        default: ''
      tests:
        description: 'tests to run'
        required: false
        default: ''

  schedule:
    - cron: "0 0 * * 0"

jobs:
  generate-matrix:
    name: Generate matrix for build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Set matrix for build
        id: set-matrix
        run: python github-actions-matrix.py --triplets ${{ github.event.inputs.triplets }} --tests ${{ github.event.inputs.tests }}
  build:
    name: Build ${{ matrix.test }} on ${{ matrix.triplet }}
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install cmake ninja-build nasm ${{ matrix.dependencies_ubuntu }}

      - name: Install ubuntu dependencies (mingw only)
        if: matrix.os == 'ubuntu-latest' && startsWith(matrix.triplet, 'x64-mingw')
        run: sudo apt-get install gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64

      - name: Install macos dependencies
        if: matrix.os == 'macos-latest'
        run: brew install cmake ninja nasm

      - uses: actions/cache@v2
        id: vcpkg-executable-cache
        with:
          path: ./vcpkg/vcpkg*
          key: vcpkg-${{ runner.os }}

      - name: Bootstrap vcpkg (non-windows)
        if: matrix.os != 'windows-latest' && steps.vcpkg-executable-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/bootstrap-vcpkg.sh -disableMetrics -useSystemBinaries

      - name: Bootstrap vcpkg (windows)
        if: matrix.os == 'windows-latest' && steps.vcpkg-executable-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/bootstrap-vcpkg.bat

      # https://github.com/microsoft/vcpkg/issues/18291
      - name: Create vcpkg/downloads to work around vcpkg bug
        run: mkdir ./vcpkg/downloads

      - uses: actions/cache@v2
        id: vcpkg-installed-cache
        with:
          path: ./vcpkg/installed
          key: vcpkg-${{ hashFiles('VCPKG_HASH.txt') }}-${{ matrix.triplet }}-${{ matrix.test }}

      - name: Install pkgconf (windows)
        if: matrix.os == 'windows-latest' && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/vcpkg install pkgconf:${{ matrix.triplet }} --recurse

      - name: Install ffmpeg
        if: steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/vcpkg install ffmpeg[${{ matrix.features }}]:${{ matrix.triplet }} --recurse

      - name: Upload logs
        if: failure() && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-${{ matrix.triplet }}-${{ matrix.test }}
          path: vcpkg/buildtrees/**/*.log

      - name: Test (non-windows)
        if: matrix.os != 'windows-latest'
        run: ./test.sh ${{ github.workspace }}/vcpkg ${{ matrix.triplet }}
 
      - name: Test (windows)
        if: matrix.os == 'windows-latest'
        run: ./test.bat ${{ github.workspace }}\vcpkg ${{ matrix.triplet }}
