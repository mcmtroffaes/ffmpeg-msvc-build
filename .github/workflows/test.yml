name: test

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

  workflow_dispatch:
    inputs:
      triplets:
        description: 'Triplets'
        required: false
        default: ''
      tests:
        description: 'Tests'
        required: false
        default: ''
      period:
        description: 'Matrix period'
        required: true
        default: 1
      run:
        description: 'Matrix run (modulo period)'
        required: true
        default: 0

  schedule:
    # daily at 3am
    - cron: "0 3 * * *"

jobs:
  generate-matrix:
    name: Generate matrix for build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Set matrix for build
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]
          then
            # period = 60 days, run = day of year
            python github-actions-matrix.py --period 60 --run `date +%j`
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
          then
            python github-actions-matrix.py --triplets ${{ github.event.inputs.triplets }} --tests ${{ github.event.inputs.tests }} --period ${{ github.event.inputs.period }} --run ${{ github.event.inputs.run }}
          elif [[ "${{ github.event_name }}" == "push" ]]
          then
            python github-actions-matrix.py --triplets x64-windows x64-windows-static x64-windows-static-md --tests all
          fi

  build:
    name: Build ${{ matrix.test }} on ${{ matrix.triplet }}
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install cmake ninja-build nasm ${{ matrix.dependencies_ubuntu }}

      - name: Install ubuntu dependencies (mingw only)
        if: matrix.os == 'ubuntu-latest' && startsWith(matrix.triplet, 'x64-mingw')
        run: sudo apt-get install gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64

      - name: Install macos dependencies
        if: matrix.os == 'macos-latest'
        run: brew install cmake ninja nasm ${{ matrix.dependencies_macos }}

      - uses: actions/cache@v2
        id: vcpkg-executable-cache
        with:
          path: ./vcpkg/vcpkg*
          key: vcpkg-${{ runner.os }}-2

      - name: Bootstrap vcpkg (non-windows)
        if: success() && matrix.os != 'windows-latest' && steps.vcpkg-executable-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/bootstrap-vcpkg.sh -disableMetrics -useSystemBinaries

      - name: Bootstrap vcpkg (windows)
        if: success() && matrix.os == 'windows-latest' && steps.vcpkg-executable-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/bootstrap-vcpkg.bat

      - uses: actions/cache@v2
        id: vcpkg-installed-cache
        with:
          path: ./vcpkg/installed
          key: vcpkg-${{ hashFiles('VCPKG_HASH.txt') }}-${{ matrix.triplet }}-${{ matrix.test }}

      - name: Install pkgconf (windows)
        if: success() && matrix.os == 'windows-latest' && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          ./vcpkg/vcpkg install pkgconf:x64-windows --recurse
          Remove-Item -Path ./vcpkg/packages -Recurse -ErrorAction Ignore
          Remove-Item -Path ./vcpkg/buildtrees -Recurse -ErrorAction Ignore

      - name: Install ffmpeg
        if: success() && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        run: ./vcpkg/vcpkg install ffmpeg[${{ matrix.features }}]:${{ matrix.triplet }} --recurse

      - name: Upload logs
        if: failure() && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: logs-${{ matrix.triplet }}-${{ matrix.test }}
          path: |
            vcpkg/buildtrees/**/*.log
            vcpkg/buildtrees/**/meson-log.txt
            vcpkg/packages/**/*.pc
            vcpkg/packages/**/*.cmake
          retention-days: 7

      - name: Cleanup
        shell: pwsh
        run: |
          Remove-Item -Path ./vcpkg/packages -Recurse -ErrorAction Ignore
          Remove-Item -Path ./vcpkg/buildtrees -Recurse -ErrorAction Ignore

      - name: Install test dependencies
        if: success() && steps.vcpkg-installed-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          ./vcpkg/vcpkg install fmt:${{ matrix.triplet }} --recurse
          Remove-Item -Path ./vcpkg/packages -Recurse -ErrorAction Ignore
          Remove-Item -Path ./vcpkg/buildtrees -Recurse -ErrorAction Ignore

      - name: Test (non-windows)
        if: success() && matrix.os != 'windows-latest'
        run: ./test.sh ${{ github.workspace }}/vcpkg ${{ matrix.triplet }}
 
      - name: Test (windows)
        if: success() && matrix.os == 'windows-latest'
        run: ./test.bat ${{ github.workspace }}\vcpkg ${{ matrix.triplet }}

      - name: Export
        if: success() && matrix.test == 'all'
        shell: pwsh
        run: ./export.ps1 -vcpkg ${{ github.workspace }}\vcpkg -triplet ${{ matrix.triplet }} -features "${{ matrix.features }}" -ErrorAction Stop

      - name: Upload export
        if:  success() && matrix.test == 'all'
        uses: actions/upload-artifact@v2
        with:
          name: export-${{ matrix.triplet }}-${{ matrix.test }}
          path: |
            ffmpeg*.7z
          retention-days: 1

      - name: Release
        if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest' && matrix.test == 'all'
        shell: pwsh
        run: |
          gh release upload ("${{ github.ref }}" -split '/')[-1] (Get-Item -Path ffmpeg*.7z).Name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
